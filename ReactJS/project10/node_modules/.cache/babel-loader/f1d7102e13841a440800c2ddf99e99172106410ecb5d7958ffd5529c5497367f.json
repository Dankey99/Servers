{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Servers\\\\ReactJS\\\\project10\\\\src\\\\Records.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Records() {\n  let employees = [{\n    \"name\": \"James\",\n    \"department\": \"IT\",\n    \"salary\": 1000\n  }, {\n    \"name\": \"Dan\",\n    \"department\": \"IT\",\n    \"salary\": 1000\n  }, {\n    \"name\": \"Stan\",\n    \"department\": \"IT\",\n    \"salary\": 1000\n  }];\n  function doSomething(rec) {\n    return rec.name;\n  }\n  function check(rec) {\n    if (rec.department == \"IT\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  let name1 = employees.map(doSomething);\n  let name2 = employees.filter(check);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [name1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), name2.length]\n  }, void 0, true);\n}\n_c = Records;\nexport default Records;\nvar _c;\n$RefreshReg$(_c, \"Records\");","map":{"version":3,"names":["Records","employees","doSomething","rec","name","check","department","name1","map","name2","filter","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Servers/ReactJS/project10/src/Records.js"],"sourcesContent":["function Records(){\r\n    let employees=[\r\n        {\"name\":\"James\",\r\n        \"department\":\"IT\",\r\n         \"salary\":1000},\r\n\r\n        {\"name\":\"Dan\",\r\n        \"department\":\"IT\",\r\n         \"salary\":1000},\r\n\r\n        {\"name\":\"Stan\",\r\n        \"department\":\"IT\",\r\n         \"salary\":1000}\r\n    ]\r\n        function doSomething(rec){\r\n            return rec.name\r\n        }\r\n        function check(rec){\r\n            if(rec.department==\"IT\"){\r\n                return true\r\n            }else{\r\n                return false\r\n            }\r\n            }\r\n            let name1=employees.map(doSomething)\r\n            let name2=employees.filter(check)\r\n            \r\n            return(\r\n                <>\r\n                {name1}\r\n                <br/>\r\n                {name2.length}\r\n                </>\r\n            )\r\n        }\r\n    \r\n\r\n\r\nexport default Records;"],"mappings":";;;AAAA,SAASA,OAAOA,CAAA,EAAE;EACd,IAAIC,SAAS,GAAC,CACV;IAAC,MAAM,EAAC,OAAO;IACf,YAAY,EAAC,IAAI;IAChB,QAAQ,EAAC;EAAI,CAAC,EAEf;IAAC,MAAM,EAAC,KAAK;IACb,YAAY,EAAC,IAAI;IAChB,QAAQ,EAAC;EAAI,CAAC,EAEf;IAAC,MAAM,EAAC,MAAM;IACd,YAAY,EAAC,IAAI;IAChB,QAAQ,EAAC;EAAI,CAAC,CAClB;EACG,SAASC,WAAWA,CAACC,GAAG,EAAC;IACrB,OAAOA,GAAG,CAACC,IAAI;EACnB;EACA,SAASC,KAAKA,CAACF,GAAG,EAAC;IACf,IAAGA,GAAG,CAACG,UAAU,IAAE,IAAI,EAAC;MACpB,OAAO,IAAI;IACf,CAAC,MAAI;MACD,OAAO,KAAK;IAChB;EACA;EACA,IAAIC,KAAK,GAACN,SAAS,CAACO,GAAG,CAACN,WAAW,CAAC;EACpC,IAAIO,KAAK,GAACR,SAAS,CAACS,MAAM,CAACL,KAAK,CAAC;EAEjC,oBACIM,OAAA,CAAAC,SAAA;IAAAC,QAAA,GACCN,KAAK,eACNI,OAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACJR,KAAK,CAACS,MAAM;EAAA,eACX,CAAC;AAEX;AAACC,EAAA,GAlCAnB,OAAO;AAsChB,eAAeA,OAAO;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}